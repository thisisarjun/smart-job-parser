[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 120
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/(\.venv|venv|__pycache__|\.git|\.pytest_cache|\.tox|\.ruff_cache|\.idea|\.cursor)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
skip_glob = [
    ".venv/*",
    "venv/*",
    "__pycache__/*",
    ".git/*",
    ".pytest_cache/*",
    ".tox/*",
    ".ruff_cache/*",
    ".idea/*",
    ".cursor/*"
]

[tool.flake8]
max-line-length = 120
extend-ignore = [
    "E203",  # whitespace before ':'
    "W503",  # line break before binary operator
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in __init__
    "D400",  # First line should end with a period
    "I100",  # Import statements are in the wrong order
    "I201",  # Missing newline between import groups
    "E402",  # module level import not at top of file (for sys.path.append cases)
    "W292",  # no newline at end of file
    "B008",  # Do not perform function calls in argument defaults
]
per-file-ignores = [
    "tests/fixtures/*:E501",  # Ignore line length in fixture files
]
exclude = [
    ".venv",
    "venv",
    "__pycache__",
    ".git",
    ".pytest_cache",
    ".tox",
    ".ruff_cache",
    ".idea",
    ".cursor",
    "build",
    "dist",
    "*.egg-info"
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
exclude = [
    ".venv/",
    "venv/",
    "__pycache__/",
    ".git/",
    ".pytest_cache/",
    ".tox/",
    ".ruff_cache/",
    ".idea/",
    ".cursor/",
    "build/",
    "dist/"
]

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
addopts = "-v --cov=src --cov-report=term-missing"
asyncio_mode = "auto"

[tool.pytest_env]
ENV="testing"

[project]
name = "smart-job-parser"
version = "0.1.0"
description = "A FastAPI-based application for parsing and analyzing job listings"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[project.urls]
Homepage = "https://github.com/yourusername/smart-job-parser"
Repository = "https://github.com/yourusername/smart-job-parser.git"
